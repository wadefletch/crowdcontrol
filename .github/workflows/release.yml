name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (auto, major, minor, patch)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - major
          - minor
          - patch
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check conventional commits
      uses: cocogitto/cocogitto-action@v3
      with:
        check-latest-tag-only: true

    - name: Cocogitto release
      uses: cocogitto/cocogitto-action@v3
      id: release
      with:
        release: true
        release-type: ${{ github.event.inputs.release_type || 'auto' }}
        git-user: 'cog-bot'
        git-user-email: 'cog@wadefletch.com'

    - name: Generate changelog
      if: steps.release.outputs.version
      run: cog changelog --at ${{ steps.release.outputs.version }} -t full_hash > GITHUB_CHANGELOG.md

    - name: Update GitHub release with changelog
      if: steps.release.outputs.version
      run: |
        gh release edit v${{ steps.release.outputs.version }} --notes-file GITHUB_CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: release
    if: needs.release.outputs.version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest  
            target: aarch64-unknown-linux-gnu
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
    - uses: actions/checkout@v4
    
    - uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - run: cargo build --release --target ${{ matrix.target }} --bin crowdcontrol
    
    - name: Package
      shell: bash
      run: |
        name="crowdcontrol-${{ matrix.target }}"
        mkdir -p dist
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          cp target/${{ matrix.target }}/release/crowdcontrol.exe dist/
          cd dist && 7z a $name.zip crowdcontrol.exe
        else
          cp target/${{ matrix.target }}/release/crowdcontrol dist/
          cd dist && tar czf $name.tar.gz crowdcontrol
        fi
    
    - name: Upload to release
      run: |
        for file in dist/*; do
          gh release upload v${{ needs.release.outputs.version }} "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: [release, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Publish cargo
      run: |
        cargo publish -p crowdcontrol-core --token ${{ secrets.CARGO_REGISTRY_TOKEN }} || true
        sleep 10
        cargo publish -p crowdcontrol-cli --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
    
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        registry-url: https://registry.npmjs.org
    
    - name: Publish npm
      run: |
        cd npm
        npm version ${{ needs.release.outputs.version }} --no-git-tag-version --allow-same-version
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}